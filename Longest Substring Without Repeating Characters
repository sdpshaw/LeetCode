"""
Given a string s, find the length of the longest substring without repeating characters.

Example 1:

Input: s = "abcabcbb"
Output: 3
Explanation: The answer is "abc", with the length of 3.
Example 2:

Input: s = "bbbbb"
Output: 1
Explanation: The answer is "b", with the length of 1.
Example 3:

Input: s = "pwwkew"
Output: 3
Explanation: The answer is "wke", with the length of 3.
Notice that the answer must be a substring, "pwke" is a subsequence and not a substring.
"""
Solution 1:

def lengthOfLongestSubstring(self, s: str) -> int:
    ans = 0
    for i in range(len(s)):
        visited = [0]*256
        for j in range(i, len(s)):
            if visited[ord(s[j])] == True:
                break
            else:
                ans = max(ans, j - i + 1)
                visited[ord(s[j])] = True
    return ans
    
Solution 2:
def lengthOfLongestSubstring(self, s: str) -> int:
    visited = [0]*256
    j=0
    i=0
    ans = 0
    while j < len(s):
        visited[ord(s[j])] += 1
        while visited[ord(s[j])] >  1:
            visited[ord(s[i])] -= 1
            i += 1
        ans = max(ans, j - i + 1)
        j += 1
    return ans
            
